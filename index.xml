<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Showcase Template</title><link>https://visualcomputing.github.io/showcase/</link><description>Recent content in Introduction on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing.github.io/showcase/docs/Workshops/-Illusions-Masking/illusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Workshops/-Illusions-Masking/illusions/</guid><description>Optical Illusions # Optical illusions are phenomena where our eyes and brain perceive things differently than they actually are in reality. These illusions can be caused by a variety of factors, such as light and shadow, color, patterns, and depth perception.
Our eyes gather information about the world around us and send signals to our brain to interpret that information. However, sometimes our brain interprets that information in a way that doesn&amp;rsquo;t match reality.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Workshops/-Illusions-Masking/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Workshops/-Illusions-Masking/masking/</guid><description>Images Masking # Kernel masking, also known as convolution masking, is a technique used in image processing to apply a specific filter or kernel to an image. This technique involves sliding a small matrix, known as a kernel or filter, over the entire image and performing a mathematical operation at each pixel location. The resulting output image is a new image that has been transformed based on the filter&amp;rsquo;s characteristics.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Workshops/coloring-copy/coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Workshops/coloring-copy/coloring/</guid><description>HSL Color Mode # HSL stands for Hue, Saturation, Lightness, and it&amp;rsquo;s a color model used in digital devices to represent colors. It works by defining a color based on its hue, which is its position on the color wheel, its saturation, which is its intensity or purity, and its lightness, which is its brightness or darkness. In the HSL model, the hue value represents the color itself, while the saturation and lightness values determine how vivid and bright or dull and dark the color appears.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Workshops/coloring-copy/coloring/coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Workshops/coloring-copy/coloring/coloring/</guid><description>HSL Color Mode # HSL stands for Hue, Saturation, Lightness, and it&amp;rsquo;s a color model used in digital devices to represent colors. It works by defining a color based on its hue, which is its position on the color wheel, its saturation, which is its intensity or purity, and its lightness, which is its brightness or darkness. In the HSL model, the hue value represents the color itself, while the saturation and lightness values determine how vivid and bright or dull and dark the color appears.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Workshops/coloring/coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Workshops/coloring/coloring/</guid><description>HSL Color Mode # HSL stands for Hue, Saturation, Lightness, and it&amp;rsquo;s a color model used in digital devices to represent colors. It works by defining a color based on its hue, which is its position on the color wheel, its saturation, which is its intensity or purity, and its lightness, which is its brightness or darkness. In the HSL model, the hue value represents the color itself, while the saturation and lightness values determine how vivid and bright or dull and dark the color appears.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Workshops/Procedural-Texturing/3DShapes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Workshops/Procedural-Texturing/3DShapes/</guid><description>HSL Color Mode # HSL stands for Hue, Saturation, Lightness, and it&amp;rsquo;s a color model used in digital devices to represent colors. It works by defining a color based on its hue, which is its position on the color wheel, its saturation, which is its intensity or purity, and its lightness, which is its brightness or darkness. In the HSL model, the hue value represents the color itself, while the saturation and lightness values determine how vivid and bright or dull and dark the color appears.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Workshops/terrain_generation/mach_bands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Workshops/terrain_generation/mach_bands/</guid><description>Terrain with Perlin Noise # Perlin Noise is used here to represent the &amp;ldquo;natural&amp;rdquo; change in incerted triangles in a plane
Perlin Noise # Perlin Noise is a type of procedural noise function, meaning that it generates random values in a way that looks natural and organic. It was invented by Ken Perlin in 1983 for use in computer graphics.
Perlin Noise generates a grid of values, where each grid point is assigned a random value.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/About-Us/Alejandro_Melo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/About-Us/Alejandro_Melo/</guid><description>Daniel Alejandro Melo Nuvan # About me # Hi! I&amp;rsquo;m Daniel Alejandro Melo Nuvan, I&amp;rsquo;m a Software Engineer with 1 and a half year of experience with Backend technologies like Docker, NodeJS, Django, Mysql, MongoDb, and many other. As a thechnofile i&amp;rsquo;m always willing to learn new technologies and improve my skills in as many fields as possible, and the optimization thechniques that are required for the visual computing field are a great challenge for me.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/About-Us/David_Cifuentes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/About-Us/David_Cifuentes/</guid><description> David Alejandro Cifuentes Gonzalez # I&amp;rsquo;m a Systems engenering student at Universidad Nacional de Colombia, I&amp;rsquo;m from Bogota-Colombia and I&amp;rsquo;m currently coursing the sixth semester of the carrer
My carrer development aspirations
Data Science AI Project Management Hobbies
Tennis Guitar/Piano Overthink stuff Music Contact me
Github Linkedin Email</description></item><item><title>First Delivery</title><link>https://visualcomputing.github.io/showcase/docs/video-deliveries/first_delivery/</link><pubDate>Thu, 30 Mar 2023 18:10:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/video-deliveries/first_delivery/</guid><description> First Delivery #</description></item></channel></rss>